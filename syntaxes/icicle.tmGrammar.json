{
	"scopeName": "source.icicle",
	"patterns": [
                { "include": "#comment" },
                { "include": "#expression" },
                { "include": "#type-signature" }
        ],
	"repository": {
                "comment": {
                        "patterns": [
                                { "include": "#comment-line" }
                        ]
                },
                "comment-line": {
                        "match": "(--).*$\n?",
                        "name":  "comment.line.icicle"
                },

                "type-signature": {
                        "begin": "^([a-z_][a-zA-Z0-9_']*)\\s+(\\:)",
                        "beginCaptures": {
                          "1": {
                            "name": "entity.name.function.icicle"
                          },
                          "2": {
                            "name": "keyword.other.colon.icicle"
                          }
                        },
                        "end": "((^(?=[a-z]))|^$)",
                        "name": "meta.function.type-declaration.icicle",
                        "patterns": [
                          {
                            "include": "#type-signature-chunk"
                          }
                        ]
                      },
                      "type-signature-chunk": {
                        "patterns": [
                          {
                            "match": "->",
                            "name": "keyword.operator.arrow.icicle"
                          },
                          {
                            "match": "\\s+",
                            "name": "punctuation.spaces.icicle"
                          },
                          {
                            "include": "#module-prefix"
                          },
                          {
                            "match": "\\b[a-z][a-zA-Z0-9]*\\b",
                            "name": "variable.type.icicle"
                          },
                          {
                            "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
                            "name": "storage.type.icicle"
                          },
                          {
                            "match": "\\(\\)",
                            "name": "constant.unit.icicle"
                          },
                          {
                            "include": "#comma"
                          },
                          {
                            "include": "#parens"
                          },
                          {
                            "include": "#comments"
                          },
                          {
                            "include": "#type-record"
                          }
                        ]
                      },

                "expression": {
			"patterns": [
                                { "include": "#keyword-term" },
                                { "include": "#prim-operator" },
                                { "include": "#prim-constructor" },
                                { "include": "#prim-numeric"},
                                { "include": "#paren-round-expression" },
                                { "include": "#paren-square-expression" },
                                { "include": "#paren-brace-expression" }
                        ]
		},
		"keyword-term": {
			"match": "\\b(let|in|if|then|else|case|of|seq|fold|fold1|windowed|latest|group|distinct|where)\\b",
			"name": "keyword.control.expression.term.icicle"
		},
                "prim-operator": {
                        "match": "\\#[a-z][a-zA-Z0-9']*" ,
                        "name": "constant.primitive.operator.icicle"
                },
                "prim-constructor": {
                        "match": "\\#[A-Z][a-zA-Z0-9']*" ,
                        "name": "constant.primitive.constructor.icicle"
                },
                "prim-numeric": {
                        "match": "\\b[0-9]+\\b",
                        "name":  "constant.numeric.icicle"
                },
                "paren-round-expression": {
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": { "name": "punctuation.paren.round.open.icicle" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.paren.round.close.icicle" }
			},
			"name": "expression.group.round.icicle",
			"patterns": [{ "include": "#expression" }]
		},
                "paren-square-expression": {
			"begin": "\\[",
			"end": "\\]",
			"beginCaptures": {
				"0": { "name": "punctuation.paren.square.open.icicle" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.paren.square.close.icicle" }
			},
			"name": "expression.group.square.icicle",
			"patterns": [{ "include": "#expression" }]
		},
                "paren-brace-expression": {
			"begin": "\\{",
			"end": "\\}",
			"beginCaptures": {
				"0": { "name": "punctuation.paren.brace.open.icicle" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.paren.brace.close.icicle" }
			},
			"name": "expression.group.brace.icicle",
			"patterns": [{ "include": "#expression" }]
		}

        }
}