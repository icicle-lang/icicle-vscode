{
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#expression"
    },
    {
      "include": "#type-declaration"
    },
    {
      "include": "#type-signature"
    }
  ],
  "repository": {
    "block_comment": {
      "applyEndPatternLast": 1,
      "begin": "\\{-(?!#)",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.icicle"
        }
      },
      "end": "-\\}",
      "name": "comment.block.icicle",
      "patterns": [
        {
          "include": "#block_comment"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "include": "#comment_line"
        },
        {
          "include": "#block_comment"
        }
      ]
    },
    "comment_line": {
      "match": "(--).*$\n?",
      "name": "comment.line.icicle"
    },
    "dictionary-term": {
      "match": "\\b(feature)\\b",
      "name": "entity.name.function.icicle"
    },
    "expression": {
      "patterns": [
        {
          "include": "#keyword-term"
        },
        {
          "include": "#dictionary-term"
        },
        {
          "include": "#prim-operator"
        },
        {
          "include": "#prim-constructor"
        },
        {
          "include": "#prim-numeric"
        },
        {
          "include": "#paren-round-expression"
        },
        {
          "include": "#paren-square-expression"
        },
        {
          "include": "#paren-brace-expression"
        },
        {
          "include": "#string-quote"
        }
      ]
    },
    "keyword-term": {
      "match": "\\b(from|let|scan|in|if|then|else|case|of|seq|fold|fold1|filter|windowed|latest|group|array|distinct|where|module|import)\\b",
      "name": "keyword.control.expression.term.icicle"
    },
    "paren-brace-expression": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.paren.brace.open.icicle"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.paren.brace.close.icicle"
        }
      },
      "name": "expression.group.brace.icicle",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "paren-round-expression": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.paren.round.open.icicle"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.paren.round.close.icicle"
        }
      },
      "name": "expression.group.round.icicle",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "paren-square-expression": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.paren.square.open.icicle"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.paren.square.close.icicle"
        }
      },
      "name": "expression.group.square.icicle",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "prim-constructor": {
      "match": "\\#[A-Z][a-zA-Z0-9']*",
      "name": "constant.primitive.constructor.icicle"
    },
    "prim-numeric": {
      "match": "\\b[0-9]+\\b",
      "name": "constant.numeric.icicle"
    },
    "prim-operator": {
      "match": "\\#[a-z][a-zA-Z0-9']*",
      "name": "constant.primitive.operator.icicle"
    },
    "string-quote": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.elm"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.elm"
        }
      },
      "name": "string.quoted.double.elm",
      "patterns": [
        {
          "match": "\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]|x[0-9a-fA-F]{1,5})",
          "name": "constant.character.escape.elm"
        },
        {
          "match": "\\^[A-Z@\\[\\]\\\\\\^_]",
          "name": "constant.character.escape.control.elm"
        }
      ]
    },
    "type-declaration": {
      "begin": "^(type\\s+)([A-Z][a-zA-Z0-9_']*)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.type.elm"
        },
        "2": {
          "name": "storage.type.elm"
        }
      },
      "end": "^(?=\\S)",
      "name": "meta.function.type-declaration.elm",
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "constant.type-constructor.elm"
            }
          },
          "match": "^\\s*([A-Z][a-zA-Z0-9_]*)\\b",
          "name": "meta.record.field.elm"
        },
        {
          "match": "\\s+",
          "name": "punctuation.spaces.elm"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.operator.assignment.elm"
            },
            "2": {
              "name": "constant.type-constructor.elm"
            }
          },
          "match": "(\\=|\\|)\\s+([A-Z][a-zA-Z0-9_]*)\\b",
          "name": "meta.record.field.elm"
        },
        {
          "match": "\\=",
          "name": "keyword.operator.assignment.elm"
        },
        {
          "match": "\\-\\>",
          "name": "keyword.operator.arrow.elm"
        },
        {
          "include": "#module-prefix"
        },
        {
          "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
          "name": "variable.type.elm"
        },
        {
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
          "name": "storage.type.elm"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#type-record"
        }
      ]
    },
    "type-signature": {
      "begin": "^(input\\s+)?([a-z_][a-zA-Z0-9_']*)\\s+(\\:)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.icicle"
        },
        "2": {
          "name": "entity.name.function.icicle"
        },
        "3": {
          "name": "keyword.other.colon.icicle"
        }
      },
      "end": "((^(?=[a-z]))|^$)",
      "name": "meta.function.type-declaration.icicle",
      "patterns": [
        {
          "include": "#type-signature-chunk"
        }
      ]
    },
    "type-signature-chunk": {
      "patterns": [
        {
          "match": "->",
          "name": "keyword.operator.arrow.icicle"
        },
        {
          "match": "\\s+",
          "name": "punctuation.spaces.icicle"
        },
        {
          "include": "#module-prefix"
        },
        {
          "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
          "name": "variable.type.icicle"
        },
        {
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
          "name": "storage.type.icicle"
        },
        {
          "match": "\\(\\)",
          "name": "constant.unit.icicle"
        },
        {
          "include": "#comma"
        },
        {
          "include": "#parens"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#type-record"
        }
      ]
    }
  },
  "scopeName": "source.icicle"
}
